// Code generated by Kitex v0.6.2. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "tiktok/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserInfo":       kitex.NewMethodInfo(userInfoHandler, newUserServiceUserInfoArgs, newUserServiceUserInfoResult, false),
		"UserCreate":     kitex.NewMethodInfo(userCreateHandler, newUserServiceUserCreateArgs, newUserServiceUserCreateResult, false),
		"UserLogin":      kitex.NewMethodInfo(userLoginHandler, newUserServiceUserLoginArgs, newUserServiceUserLoginResult, false),
		"FriendList":     kitex.NewMethodInfo(friendListHandler, newUserServiceFriendListArgs, newUserServiceFriendListResult, false),
		"FollowerList":   kitex.NewMethodInfo(followerListHandler, newUserServiceFollowerListArgs, newUserServiceFollowerListResult, false),
		"FollowList":     kitex.NewMethodInfo(followListHandler, newUserServiceFollowListArgs, newUserServiceFollowListResult, false),
		"RelationAction": kitex.NewMethodInfo(relationActionHandler, newUserServiceRelationActionArgs, newUserServiceRelationActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func userInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserInfoArgs)
	realResult := result.(*user.UserServiceUserInfoResult)
	success, err := handler.(user.UserService).UserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserInfoArgs() interface{} {
	return user.NewUserServiceUserInfoArgs()
}

func newUserServiceUserInfoResult() interface{} {
	return user.NewUserServiceUserInfoResult()
}

func userCreateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserCreateArgs)
	realResult := result.(*user.UserServiceUserCreateResult)
	success, err := handler.(user.UserService).UserCreate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserCreateArgs() interface{} {
	return user.NewUserServiceUserCreateArgs()
}

func newUserServiceUserCreateResult() interface{} {
	return user.NewUserServiceUserCreateResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserLoginArgs)
	realResult := result.(*user.UserServiceUserLoginResult)
	success, err := handler.(user.UserService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserLoginArgs() interface{} {
	return user.NewUserServiceUserLoginArgs()
}

func newUserServiceUserLoginResult() interface{} {
	return user.NewUserServiceUserLoginResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFriendListArgs)
	realResult := result.(*user.UserServiceFriendListResult)
	success, err := handler.(user.UserService).FriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFriendListArgs() interface{} {
	return user.NewUserServiceFriendListArgs()
}

func newUserServiceFriendListResult() interface{} {
	return user.NewUserServiceFriendListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowerListArgs)
	realResult := result.(*user.UserServiceFollowerListResult)
	success, err := handler.(user.UserService).FollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowerListArgs() interface{} {
	return user.NewUserServiceFollowerListArgs()
}

func newUserServiceFollowerListResult() interface{} {
	return user.NewUserServiceFollowerListResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowListArgs)
	realResult := result.(*user.UserServiceFollowListResult)
	success, err := handler.(user.UserService).FollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowListArgs() interface{} {
	return user.NewUserServiceFollowListArgs()
}

func newUserServiceFollowListResult() interface{} {
	return user.NewUserServiceFollowListResult()
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRelationActionArgs)
	realResult := result.(*user.UserServiceRelationActionResult)
	success, err := handler.(user.UserService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRelationActionArgs() interface{} {
	return user.NewUserServiceRelationActionArgs()
}

func newUserServiceRelationActionResult() interface{} {
	return user.NewUserServiceRelationActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserInfo(ctx context.Context, req *user.UserInfoRequest) (r *user.UserInfoResponse, err error) {
	var _args user.UserServiceUserInfoArgs
	_args.Req = req
	var _result user.UserServiceUserInfoResult
	if err = p.c.Call(ctx, "UserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserCreate(ctx context.Context, req *user.UserCreateRequest) (r *user.UserCreateResponse, err error) {
	var _args user.UserServiceUserCreateArgs
	_args.Req = req
	var _result user.UserServiceUserCreateResult
	if err = p.c.Call(ctx, "UserCreate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *user.UserLoginRequest) (r *user.UserLoginRequest, err error) {
	var _args user.UserServiceUserLoginArgs
	_args.Req = req
	var _result user.UserServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, req *user.FriendListRequest) (r *user.FriendListResponse, err error) {
	var _args user.UserServiceFriendListArgs
	_args.Req = req
	var _result user.UserServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, req *user.FriendListRequest) (r *user.FollowerListResponse, err error) {
	var _args user.UserServiceFollowerListArgs
	_args.Req = req
	var _result user.UserServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, req *user.FollowListRequest) (r *user.FollowListResponse, err error) {
	var _args user.UserServiceFollowListArgs
	_args.Req = req
	var _result user.UserServiceFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationAction(ctx context.Context, req *user.RelationActionRequest) (r *user.RelationActionResponse, err error) {
	var _args user.UserServiceRelationActionArgs
	_args.Req = req
	var _result user.UserServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
